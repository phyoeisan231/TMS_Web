{"ast":null,"code":"import { TmsOperationModule } from '../../tms-operation.module';\nimport Swal from 'sweetalert2';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { addDays } from '@syncfusion/ej2/schedule';\nimport { catchError, of } from 'rxjs';\nimport moment from 'moment';\nimport { Browser } from '@syncfusion/ej2/base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./inbound-check.service\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = [\"Grid\"];\nconst _c1 = [\"cardModel\"];\nexport class InboundCheckComponent {\n  // end multi file upload\n  constructor(service, spinner, router) {\n    this.service = service;\n    this.spinner = spinner;\n    this.router = router;\n    this.pageSettings = {\n      pageSize: 50\n    };\n    this.editSettings = {\n      allowEditing: false,\n      allowAdding: true,\n      allowDeleting: true,\n      mode: 'Dialog'\n    };\n    this.toolbar = ['Add', {\n      text: \"Details\",\n      tooltipText: \"Details\",\n      prefixIcon: \"e-icons e-paste\",\n      id: \"detail\"\n    }, {\n      text: \"Add Card Info\",\n      tooltipText: \"Add Card Info\",\n      prefixIcon: \"e-circle-add\",\n      id: \"card\"\n    }, 'Delete', 'ExcelExport', 'Search'];\n    this.lines = 'Both';\n    this.submitClicked = false;\n    this.formatfilter = \"MM/dd/yyyy\";\n    this.format = \"dd/MM/yyyy h:mm a\";\n    this.typeList = ['FCL', 'LCL'];\n    this.statusList = ['Check(In)', 'In'];\n    this.yardList = [];\n    this.gateList = [];\n    this.interval = 1;\n    this.endDate = new Date();\n    this.startDate = addDays(this.endDate, -7);\n    this.today = new Date();\n    // set placeholder to MultiSelect input element\n    this.placeholder = 'Select One';\n    this.onFiltering = e => {};\n  }\n  ngOnInit() {\n    // set the type of mode for checkbox to visualized the checkbox added in li element.\n    this.mode = 'CheckBox';\n    // set the select all text to MultiSelect checkbox label.\n    this.selectAllText = 'Select All';\n    this.getLocationList();\n    this.optionForm = new FormGroup({\n      status: new FormControl(sessionStorage.getItem(\"icstatus\") ? sessionStorage.getItem(\"icstatus\").split(',') : null, Validators.required),\n      fromDate: new FormControl(sessionStorage.getItem(\"icfromDate\") ? sessionStorage.getItem(\"icfromDate\") : this.today, Validators.required),\n      toDate: new FormControl(sessionStorage.getItem(\"ictoDate\") ? sessionStorage.getItem(\"ictoDate\") : this.today, Validators.required),\n      yardID: new FormControl(sessionStorage.getItem(\"icloc\") ? sessionStorage.getItem(\"icloc\").split(',') : null, Validators.required)\n    });\n    // this.editRemarkForm = new FormGroup({\n    //   poNo: new FormControl(''),\n    //   remark: new FormControl('', Validators.required),\n    //   updatedUser: new FormControl(''),\n    // });\n  }\n  getLocationList() {\n    this.spinner.show();\n    this.service.getYardList('true').pipe(catchError(err => of(this.showError(err)))).subscribe(result => {\n      this.yardList = result;\n      this.optionForm.controls['yardID'].setValue(sessionStorage.getItem(\"loc\") ? sessionStorage.getItem(\"icloc\").split(',') : null);\n      this.spinner.hide();\n    });\n  }\n  loadTableData() {\n    this.spinner.show();\n    const formData = this.optionForm.value;\n    const fromDate = moment(formData.fromDate).format('MM/DD/YYYY');\n    const toDate = moment(formData.toDate).format('MM/DD/YYYY');\n    let status = \"\";\n    if (formData.status.length > 0) {\n      status = this.formatParams(formData.status);\n    }\n    let loc = \"\";\n    if (formData.yardID.length > 0) {\n      loc = this.formatParams(formData.yardID);\n    }\n    sessionStorage.setItem(\"icfromDate\", fromDate);\n    sessionStorage.setItem(\"ictoDate\", toDate);\n    sessionStorage.setItem(\"icstatus\", formData.status);\n    sessionStorage.setItem(\"icloc\", formData.yardID);\n    this.service.getInBoundCheckList(fromDate, toDate, loc, status).pipe(catchError(err => of(this.showError(err)))).subscribe(result => {\n      this.grid.dataSource = result;\n      this.spinner.hide();\n    });\n  }\n  actionBegin(args) {\n    if (args.requestType === 'add') {\n      this.submitClicked = false;\n      this.gateForm = this.createFormGroup(args.rowData);\n    } else if (args.requestType === 'beginEdit') {\n      this.submitClicked = false;\n      this.gateForm = this.createFormGroup(args.rowData);\n    }\n    if (args.requestType === 'save') {\n      this.submitClicked = true;\n      if (this.gateForm.valid) {\n        let formData = this.gateForm.value;\n        if (args.action === 'add') {\n          // formData.poNo =0;\n          formData.createdUser = localStorage.getItem('currentUser');\n          this.addInBoundCheck(formData);\n        }\n      } else {\n        args.cancel = true;\n      }\n    }\n    if (args.requestType === 'delete') {\n      args.cancel = true;\n      const data = args.data;\n      const id = data[0].poNo;\n      const status = data[0].status;\n      if (status === 'Check(In)') {\n        this.deleteInBoundCheck(id);\n      } else {\n        Swal.fire('Gate In(Check)', 'Data can not delete!', 'error');\n      }\n    }\n  }\n  formatParams(paramArray) {\n    return paramArray.map(item => `'${item}'`).join(',');\n  }\n  actionComplete(args) {\n    if (args.requestType === 'beginEdit' || args.requestType === 'add') {\n      args.dialog.width = 700;\n      if (args.requestType === 'add') {\n        args.dialog.header = \"New Gate In(Check)\";\n      }\n      if (Browser.isDevice) {\n        args.dialog.height = window.innerHeight - 90 + 'px';\n        args.dialog.dataBind();\n      }\n    }\n  }\n  createFormGroup(data) {\n    return new FormGroup({\n      inRegNo: new FormControl(data.inRegNo),\n      inCheckDateTime: new FormControl(this.today, Validators.required),\n      inGateID: new FormControl(data.inGateID, Validators.required),\n      inYardID: new FormControl(data.inYardID, Validators.required),\n      inPCCode: new FormControl(data.inPCCode, Validators.required),\n      truckVehicleRegNo: new FormControl(data.truckVehicleRegNo, Validators.required),\n      driverLicenseNo: new FormControl(data.truckVehicleRegNo, Validators.required),\n      driverName: new FormControl(data.driverName)\n    });\n  }\n  addInBoundCheck(formData) {\n    this.spinner.show();\n    formData.inCheckDateTime = moment(formData.inCheckDateTime).format('MM/DD/YYYY HH:mm:ss');\n    this.service.createInBoundCheck(formData).pipe(catchError(err => of(this.showError(err)))).subscribe(result => {\n      if (result.status == true) {\n        this.router.navigate([\"/tms-operation/inbound-check-doc\"], {\n          queryParams: {\n            id: result.messageContent\n          }\n        });\n      } else {\n        this.spinner.hide();\n        Swal.fire('Gate In(Check)', result.messageContent, 'error');\n      }\n    });\n  }\n  deleteInBoundCheck(id) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: 'You will not be able to recover this data!',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#DD6B55',\n      cancelButtonText: 'No, keep it',\n      confirmButtonText: 'Yes, I am sure!'\n    }).then(response => {\n      if (response.value) {\n        this.spinner.show();\n        this.service.deleteInBoundCheck(id).pipe(catchError(err => of(this.showError(err)))).subscribe(result => {\n          if (result.status == true) {\n            this.showSuccess(result.messageContent);\n            this.loadTableData();\n          } else {\n            this.spinner.hide();\n            Swal.fire('Gate In(Check)', result.messageContent, 'error');\n          }\n        });\n      } else if (response.dismiss === Swal.DismissReason.cancel) {\n        Swal.close();\n      }\n    });\n  }\n  validateControl(controlName) {\n    const control = this.gateForm.get(controlName);\n    return control.invalid && (control.dirty || control.touched) || control.invalid && this.submitClicked;\n  }\n  showSuccess(msg) {\n    this.spinner.hide();\n    Swal.fire('Gate In(Check)', msg, 'success');\n  }\n  showError(error) {\n    this.spinner.hide();\n    Swal.fire('Gate In(Check)', error.statusText, 'error');\n  }\n  toolbarClick(args) {\n    if (args.item.text === 'Excel Export') {\n      this.grid.excelExport();\n    }\n    if (args.item.id === 'detail') {\n      let selectedRecords = this.grid.getSelectedRecords();\n      if (selectedRecords.length == 0) {\n        Swal.fire('Purchase Order', \"Please select one row!\", 'warning');\n      } else {\n        const id = selectedRecords[0].inRegNo;\n        const user = localStorage.getItem('currentUser');\n        if (args.item.id === 'detail') {\n          this.router.navigate([\"/tms-operation/inbound-check-doc\"], {\n            queryParams: {\n              id: id\n            }\n          });\n        }\n        return;\n      }\n    }\n  }\n  static #_ = this.ɵfac = function InboundCheckComponent_Factory(t) {\n    return new (t || InboundCheckComponent)(i0.ɵɵdirectiveInject(i1.InboundCheckService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InboundCheckComponent,\n    selectors: [[\"app-inbound-check\"]],\n    viewQuery: function InboundCheckComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.grid = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cardModel = _t.first);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 0,\n    template: function InboundCheckComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"inbound-check works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [TmsOperationModule],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["TmsOperationModule","Swal","FormControl","FormGroup","Validators","addDays","catchError","of","moment","Browser","InboundCheckComponent","constructor","service","spinner","router","pageSettings","pageSize","editSettings","allowEditing","allowAdding","allowDeleting","mode","toolbar","text","tooltipText","prefixIcon","id","lines","submitClicked","formatfilter","format","typeList","statusList","yardList","gateList","interval","endDate","Date","startDate","today","placeholder","onFiltering","e","ngOnInit","selectAllText","getLocationList","optionForm","status","sessionStorage","getItem","split","required","fromDate","toDate","yardID","show","getYardList","pipe","err","showError","subscribe","result","controls","setValue","hide","loadTableData","formData","value","length","formatParams","loc","setItem","getInBoundCheckList","grid","dataSource","actionBegin","args","requestType","gateForm","createFormGroup","rowData","valid","action","createdUser","localStorage","addInBoundCheck","cancel","data","poNo","deleteInBoundCheck","fire","paramArray","map","item","join","actionComplete","dialog","width","header","isDevice","height","window","innerHeight","dataBind","inRegNo","inCheckDateTime","inGateID","inYardID","inPCCode","truckVehicleRegNo","driverLicenseNo","driverName","createInBoundCheck","navigate","queryParams","messageContent","title","icon","showCancelButton","confirmButtonColor","cancelButtonText","confirmButtonText","then","response","showSuccess","dismiss","DismissReason","close","validateControl","controlName","control","get","invalid","dirty","touched","msg","error","statusText","toolbarClick","excelExport","selectedRecords","getSelectedRecords","user","_","i0","ɵɵdirectiveInject","i1","InboundCheckService","i2","NgxSpinnerService","i3","Router","_2","selectors","viewQuery","InboundCheckComponent_Query","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","styles"],"sources":["D:\\PES\\RGL_Gate\\TMS_Web\\src\\app\\tms-operation\\components\\inbound-check\\inbound-check.component.ts","D:\\PES\\RGL_Gate\\TMS_Web\\src\\app\\tms-operation\\components\\inbound-check\\inbound-check.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\r\nimport { TmsOperationModule } from '../../tms-operation.module';\r\nimport Swal from 'sweetalert2';\r\nimport { DialogEditEventArgs, EditSettingsModel, GridComponent, GridLine, PageSettingsModel, SaveEventArgs } from '@syncfusion/ej2-angular-grids';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { addDays } from '@syncfusion/ej2/schedule';\r\nimport { Dialog, DialogComponent } from '@syncfusion/ej2-angular-popups';\r\nimport { InboundCheckService } from './inbound-check.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, of } from 'rxjs';\r\nimport moment from 'moment';\r\nimport { Browser, EmitType } from '@syncfusion/ej2/base';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ClickEventArgs } from '@syncfusion/ej2-angular-navigations';\r\nimport { FilteringEventArgs } from '@syncfusion/ej2-angular-dropdowns';\r\n\r\n@Component({\r\n  selector: 'app-inbound-check',\r\n  standalone: true,\r\n  imports: [TmsOperationModule],\r\n  templateUrl: './inbound-check.component.html',\r\n  styleUrl: './inbound-check.component.scss'\r\n})\r\nexport class InboundCheckComponent {\r\n  pageSettings: PageSettingsModel = { pageSize: 50 };\r\n  editSettings: EditSettingsModel = { allowEditing: false, allowAdding: true, allowDeleting: true, mode: 'Dialog' };\r\n  toolbar: any[] = ['Add',\r\n  { text: \"Details\", tooltipText: \"Details\", prefixIcon: \"e-icons e-paste\", id: \"detail\" },\r\n  { text: \"Add Card Info\", tooltipText: \"Add Card Info\", prefixIcon: \"e-circle-add\", id: \"card\" },\r\n  'Delete','ExcelExport','Search'];\r\n  lines: GridLine = 'Both';\r\n\r\n  optionForm: FormGroup;\r\n  gateForm: FormGroup;\r\n  submitClicked: boolean = false;\r\n  public formatfilter: any =\"MM/dd/yyyy\";\r\n  public format: any =\"dd/MM/yyyy h:mm a\";\r\n  typeList: any[]=['FCL','LCL'];\r\n  statusList: any[]=['Check(In)','In'];\r\n  yardList:any[]=[];\r\n  gateList:any[]=[];\r\n  interval: number =1;\r\n  endDate : Date = new Date();\r\n  startDate : Date = addDays(this.endDate,-7);\r\n  today : Date = new Date();\r\n  public data: Object[];\r\n  // set placeholder to MultiSelect input element\r\n  public placeholder: string = 'Select One';\r\n  public mode?: string;\r\n  public selectAllText: string| any;\r\n\r\n  @ViewChild('Grid') public grid: GridComponent;\r\n  @ViewChild('cardModel') cardModel: DialogComponent;\r\n   // end multi file upload\r\n  constructor(\r\n    private service: InboundCheckService,\r\n    private spinner: NgxSpinnerService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnInit(){\r\n    // set the type of mode for checkbox to visualized the checkbox added in li element.\r\n    this.mode = 'CheckBox';\r\n    // set the select all text to MultiSelect checkbox label.\r\n    this.selectAllText= 'Select All';\r\n    this.getLocationList();\r\n    this.optionForm = new FormGroup({\r\n      status: new FormControl(sessionStorage.getItem(\"icstatus\")?sessionStorage.getItem(\"icstatus\").split(','):null, Validators.required),\r\n      fromDate: new FormControl(sessionStorage.getItem(\"icfromDate\")?sessionStorage.getItem(\"icfromDate\"):this.today,Validators.required),\r\n      toDate: new FormControl(sessionStorage.getItem(\"ictoDate\")?sessionStorage.getItem(\"ictoDate\"):this.today,Validators.required),\r\n      yardID: new FormControl(sessionStorage.getItem(\"icloc\")?sessionStorage.getItem(\"icloc\").split(','):null,Validators.required),\r\n    });\r\n\r\n    // this.editRemarkForm = new FormGroup({\r\n    //   poNo: new FormControl(''),\r\n    //   remark: new FormControl('', Validators.required),\r\n    //   updatedUser: new FormControl(''),\r\n    // });\r\n\r\n  }\r\n\r\n  public onFiltering: EmitType<FilteringEventArgs> = (e: FilteringEventArgs) => {\r\n\r\n  }\r\n\r\n  getLocationList() {\r\n    this.spinner.show();\r\n    this.service.getYardList('true')\r\n    .pipe(catchError((err) => of(this.showError(err))))\r\n      .subscribe((result) => {\r\n        this.yardList = result;\r\n        this.optionForm.controls['yardID'].setValue(sessionStorage.getItem(\"loc\")?sessionStorage.getItem(\"icloc\").split(','):null);\r\n        this.spinner.hide();\r\n    });\r\n  }\r\n\r\n  loadTableData() {\r\n   this.spinner.show();\r\n   const formData = this.optionForm.value;\r\n   const fromDate = moment(formData.fromDate).format('MM/DD/YYYY');\r\n   const toDate =  moment(formData.toDate).format('MM/DD/YYYY');\r\n   let status:any =\"\";\r\n   if(formData.status.length>0){\r\n    status = this.formatParams(formData.status);\r\n   }\r\n   let loc:any =\"\";\r\n   if(formData.yardID.length>0){\r\n    loc = this.formatParams(formData.yardID);\r\n   }\r\n\r\n    sessionStorage.setItem(\"icfromDate\", fromDate);\r\n    sessionStorage.setItem(\"ictoDate\", toDate);\r\n    sessionStorage.setItem(\"icstatus\", formData.status);\r\n    sessionStorage.setItem(\"icloc\", formData.yardID);\r\n    this.service.getInBoundCheckList(fromDate,toDate,loc,status)\r\n    .pipe(catchError((err) => of(this.showError(err))))\r\n      .subscribe((result) => {\r\n        this.grid.dataSource= result;\r\n        this.spinner.hide();\r\n    });\r\n  }\r\n\r\n  actionBegin(args: SaveEventArgs): void {\r\n    if (args.requestType === 'add') {\r\n        this.submitClicked = false;\r\n        this.gateForm = this.createFormGroup(args.rowData);\r\n    }\r\n    else if(args.requestType === 'beginEdit') {\r\n      this.submitClicked = false;\r\n      this.gateForm = this.createFormGroup(args.rowData);\r\n  }\r\n    if (args.requestType === 'save') {\r\n        this.submitClicked = true;\r\n        if (this.gateForm.valid) {\r\n            let formData = this.gateForm.value;\r\n            if (args.action === 'add') {\r\n              // formData.poNo =0;\r\n              formData.createdUser = localStorage.getItem('currentUser');\r\n              this.addInBoundCheck(formData);\r\n            }\r\n        } else {\r\n            args.cancel = true;\r\n        }\r\n    }\r\n    if (args.requestType === 'delete') {\r\n      args.cancel = true;\r\n      const data = args.data as any[];\r\n      const id = data[0].poNo;\r\n      const status = data[0].status;\r\n      if(status==='Check(In)'){\r\n        this.deleteInBoundCheck(id);\r\n      }\r\n      else{\r\n        Swal.fire('Gate In(Check)', 'Data can not delete!', 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  formatParams(paramArray) {\r\n    return paramArray.map(item => `'${item}'`).join(',');\r\n  }\r\n\r\n  actionComplete(args: DialogEditEventArgs): void {\r\n    if ((args.requestType === 'beginEdit' || args.requestType === 'add')) {\r\n      args.dialog.width = 700;\r\n      if(args.requestType === 'add'){\r\n        args!.dialog!.header=\"New Gate In(Check)\" ;\r\n        }\r\n        if (Browser.isDevice) {\r\n            args!.dialog!.height = window.innerHeight - 90 + 'px';\r\n            (<Dialog>args.dialog).dataBind();\r\n        }\r\n    }\r\n  }\r\n\r\n  createFormGroup(data: any): FormGroup {\r\n    return new FormGroup({\r\n      inRegNo: new FormControl(data.inRegNo),\r\n      inCheckDateTime: new FormControl(this.today, Validators.required),\r\n      inGateID: new FormControl(data.inGateID,Validators.required),\r\n      inYardID: new FormControl(data.inYardID,Validators.required),\r\n      inPCCode: new FormControl(data.inPCCode,Validators.required),\r\n      truckVehicleRegNo: new FormControl(data.truckVehicleRegNo,Validators.required),\r\n      driverLicenseNo: new FormControl(data.truckVehicleRegNo,Validators.required),\r\n      driverName: new FormControl(data.driverName),\r\n    });\r\n  }\r\n\r\n  addInBoundCheck(formData: any) {\r\n    this.spinner.show();\r\n    formData.inCheckDateTime = moment(formData.inCheckDateTime).format('MM/DD/YYYY HH:mm:ss');\r\n    this.service\r\n      .createInBoundCheck(formData)\r\n      .pipe(catchError((err) => of(this.showError(err))))\r\n      .subscribe((result) => {\r\n        if (result.status == true) {\r\n          this.router.navigate([\"/tms-operation/inbound-check-doc\"], { queryParams: { id: result.messageContent}});\r\n        } else {\r\n          this.spinner.hide();\r\n          Swal.fire('Gate In(Check)', result.messageContent, 'error');\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  deleteInBoundCheck(id: any) {\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: 'You will not be able to recover this data!',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#DD6B55',\r\n      cancelButtonText: 'No, keep it',\r\n      confirmButtonText: 'Yes, I am sure!',\r\n    }).then((response: any) => {\r\n      if (response.value) {\r\n        this.spinner.show();\r\n        this.service\r\n          .deleteInBoundCheck(id)\r\n          .pipe(catchError((err) => of(this.showError(err))))\r\n          .subscribe((result) => {\r\n            if (result.status == true) {\r\n              this.showSuccess(result.messageContent);\r\n              this.loadTableData();\r\n            } else {\r\n              this.spinner.hide();\r\n              Swal.fire('Gate In(Check)', result.messageContent, 'error');\r\n            }\r\n          });\r\n      } else if (response.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  validateControl(controlName: string) {\r\n    const control = this.gateForm.get(controlName);\r\n    return (control.invalid && (control.dirty || control.touched)) || (control.invalid && this.submitClicked);\r\n  }\r\n\r\n\r\n  showSuccess(msg: string) {\r\n    this.spinner.hide();\r\n    Swal.fire('Gate In(Check)', msg, 'success');\r\n  }\r\n\r\n  showError(error: HttpErrorResponse) {\r\n    this.spinner.hide();\r\n    Swal.fire('Gate In(Check)', error.statusText, 'error');\r\n  }\r\n\r\n  toolbarClick(args: ClickEventArgs): void {\r\n    if(args.item.text === 'Excel Export'){\r\n      this.grid.excelExport();\r\n    }\r\n    if (args.item.id === 'detail') {\r\n      let selectedRecords: any[] = this.grid.getSelectedRecords();\r\n      if (selectedRecords.length == 0) {\r\n        Swal.fire('Purchase Order', \"Please select one row!\", 'warning');\r\n      }\r\n\r\n      else {\r\n        const id = selectedRecords[0].inRegNo;\r\n        const user = localStorage.getItem('currentUser');\r\n        if (args.item.id === 'detail')\r\n        {\r\n          this.router.navigate([\"/tms-operation/inbound-check-doc\"], { queryParams: { id: id}});\r\n        }\r\n        return;\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n","<p>inbound-check works!</p>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}