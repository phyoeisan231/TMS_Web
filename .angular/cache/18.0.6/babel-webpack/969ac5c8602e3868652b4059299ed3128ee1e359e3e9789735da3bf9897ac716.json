{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class GateService {\n  constructor(http) {\n    this.http = http;\n  }\n  getGateList(active) {\n    return this.http.get(environment.url + 'Master/GetGateList/?active=' + active);\n  }\n  getYardList(active) {\n    const params = active ? {\n      active\n    } : {}; // If active is provided, use it as a query param\n    return this.http.get(`${environment.url}Master/GetYardList`, {\n      params\n    });\n  }\n  createGate(data) {\n    return this.http.post(environment.url + 'Master/SaveGate', data, httpOptions);\n  }\n  updateGate(data) {\n    return this.http.put(environment.url + 'Master/UpdateGate/', data, httpOptions);\n  }\n  deleteGate(id) {\n    return this.http.delete(environment.url + 'Master/DeleteGate/' + id, httpOptions);\n  }\n  static #_ = this.ɵfac = function GateService_Factory(t) {\n    return new (t || GateService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GateService,\n    factory: GateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","httpOptions","headers","GateService","constructor","http","getGateList","active","get","url","getYardList","params","createGate","data","post","updateGate","put","deleteGate","id","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\PES\\RGL_Gate\\TMS_Web\\src\\app\\master\\components\\gate\\gate.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GateService {\r\n  constructor (private http: HttpClient, ) { }\r\n\r\n  getGateList(active: string) {\r\n    return this.http.get<any>(environment.url + 'Master/GetGateList/?active=' + active);\r\n  }\r\n\r\n  getYardList(active?: string): Observable<any[]> {\r\n    const params = active ? { active } : {}; // If active is provided, use it as a query param\r\n    return this.http.get<any[]>(`${environment.url}Master/GetYardList`, { params });\r\n  }\r\n  \r\n  createGate(data: any) {\r\n    return this.http.post<any>(environment.url + 'Master/SaveGate', data, httpOptions);\r\n  }\r\n\r\n  updateGate(data: any) {\r\n    return this.http.put<any>(environment.url + 'Master/UpdateGate/', data, httpOptions);\r\n  }\r\n\r\n  deleteGate(id: any) {\r\n    return this.http.delete<any>(environment.url + 'Master/DeleteGate/' + id, httpOptions);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAE1D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAID,OAAM,MAAOI,WAAW;EACtBC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAkB;EAE3CC,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAMR,WAAW,CAACS,GAAG,GAAG,6BAA6B,GAAGF,MAAM,CAAC;EACrF;EAEAG,WAAWA,CAACH,MAAe;IACzB,MAAMI,MAAM,GAAGJ,MAAM,GAAG;MAAEA;IAAM,CAAE,GAAG,EAAE,CAAC,CAAC;IACzC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAGR,WAAW,CAACS,GAAG,oBAAoB,EAAE;MAAEE;IAAM,CAAE,CAAC;EACjF;EAEAC,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAMd,WAAW,CAACS,GAAG,GAAG,iBAAiB,EAAEI,IAAI,EAAEZ,WAAW,CAAC;EACpF;EAEAc,UAAUA,CAACF,IAAS;IAClB,OAAO,IAAI,CAACR,IAAI,CAACW,GAAG,CAAMhB,WAAW,CAACS,GAAG,GAAG,oBAAoB,EAAEI,IAAI,EAAEZ,WAAW,CAAC;EACtF;EAEAgB,UAAUA,CAACC,EAAO;IAChB,OAAO,IAAI,CAACb,IAAI,CAACc,MAAM,CAAMnB,WAAW,CAACS,GAAG,GAAG,oBAAoB,GAAGS,EAAE,EAAEjB,WAAW,CAAC;EACxF;EAAC,QAAAmB,CAAA,G;qBAtBUjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}