{"ast":null,"code":"// angular import\nimport { APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// project import\nimport { AppRoutingModule } from './app-routing.module';\nimport { SharedModule } from './theme/shared/shared.module';\nimport { AppComponent } from './app.component';\nimport { MasterModule } from './master/master.module';\nimport { environment } from 'src/environments/environment';\nimport { ConfigService } from './config.service';\nimport { JwtModule } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nlet allowedDomains = [];\n// Function to initialize the app by loading config.json\nexport function appInitializer(configService) {\n  return () => configService.getConfig().toPromise().then(data => {\n    environment.url = data.url; // Set the API URL in the environment\n    allowedDomains.push(data.domain);\n  });\n}\nexport function tokenGetter() {\n  return localStorage.getItem(\"token\");\n}\nexport class AppModule {\n  static {\n    this.ɵfac = function AppModule_Factory(t) {\n      return new (t || AppModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppModule,\n      bootstrap: [AppComponent]\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [ConfigService, {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializer,\n        multi: true,\n        deps: [ConfigService]\n      }],\n      imports: [BrowserModule, AppRoutingModule, SharedModule, MasterModule, BrowserAnimationsModule, JwtModule.forRoot({\n        config: {\n          tokenGetter: tokenGetter,\n          allowedDomains: allowedDomains,\n          disallowedRoutes: []\n        }\n      })]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent],\n    imports: [BrowserModule, AppRoutingModule, SharedModule, MasterModule, BrowserAnimationsModule, i1.JwtModule]\n  });\n})();","map":{"version":3,"names":["APP_INITIALIZER","BrowserModule","BrowserAnimationsModule","AppRoutingModule","SharedModule","AppComponent","MasterModule","environment","ConfigService","JwtModule","allowedDomains","appInitializer","configService","getConfig","toPromise","then","data","url","push","domain","tokenGetter","localStorage","getItem","AppModule","bootstrap","provide","useFactory","multi","deps","imports","forRoot","config","disallowedRoutes","declarations","i1"],"sources":["D:\\poe\\RGL_TMS\\New folder\\TMS_Web\\src\\app\\app.module.ts"],"sourcesContent":["// angular import\r\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n// project import\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { SharedModule } from './theme/shared/shared.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MasterModule } from './master/master.module';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ConfigService } from './config.service';\r\nimport { JwtModule } from '@auth0/angular-jwt';\r\nlet allowedDomains: (string | RegExp)[] = [];\r\n// Function to initialize the app by loading config.json\r\nexport function appInitializer(configService: ConfigService) {\r\n  return () =>\r\n    configService.getConfig().toPromise().then((data: any) => {\r\n      environment.url = data.url; // Set the API URL in the environment\r\n      allowedDomains.push(data.domain);\r\n    });\r\n}\r\n\r\nexport function tokenGetter() {\r\n  return localStorage.getItem(\"token\");\r\n}\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, AppRoutingModule, SharedModule,MasterModule, BrowserAnimationsModule,\r\n    JwtModule.forRoot({\r\n      config: {\r\n        tokenGetter: tokenGetter,\r\n        allowedDomains: allowedDomains,\r\n        disallowedRoutes: []\r\n      }\r\n    }),\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  providers: [\r\n    ConfigService,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: appInitializer,\r\n      multi: true,\r\n      deps: [ConfigService],\r\n    },\r\n  ],\r\n})\r\nexport class AppModule {}\r\n"],"mappings":"AAAA;AACA,SAASA,eAAe,QAAkB,eAAe;AACzD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,uBAAuB,QAAQ,sCAAsC;AAC9E;AACA,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,QAAQ,oBAAoB;;;AAC9C,IAAIC,cAAc,GAAwB,EAAE;AAC5C;AACA,OAAM,SAAUC,cAAcA,CAACC,aAA4B;EACzD,OAAO,MACLA,aAAa,CAACC,SAAS,EAAE,CAACC,SAAS,EAAE,CAACC,IAAI,CAAEC,IAAS,IAAI;IACvDT,WAAW,CAACU,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5BP,cAAc,CAACQ,IAAI,CAACF,IAAI,CAACG,MAAM,CAAC;EAClC,CAAC,CAAC;AACN;AAEA,OAAM,SAAUC,WAAWA,CAAA;EACzB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC;AAwBA,OAAM,MAAOC,SAAS;;;uBAATA,SAAS;IAAA;EAAA;;;YAATA,SAAS;MAAAC,SAAA,GAXRnB,YAAY;IAAA;EAAA;;;iBACb,CACTG,aAAa,EACb;QACEiB,OAAO,EAAEzB,eAAe;QACxB0B,UAAU,EAAEf,cAAc;QAC1BgB,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE,CAACpB,aAAa;OACrB,CACF;MAAAqB,OAAA,GAlBS5B,aAAa,EAAEE,gBAAgB,EAAEC,YAAY,EAACE,YAAY,EAAEJ,uBAAuB,EAC3FO,SAAS,CAACqB,OAAO,CAAC;QAChBC,MAAM,EAAE;UACNX,WAAW,EAAEA,WAAW;UACxBV,cAAc,EAAEA,cAAc;UAC9BsB,gBAAgB,EAAE;;OAErB,CAAC;IAAA;EAAA;;;2EAaOT,SAAS;IAAAU,YAAA,GArBL5B,YAAY;IAAAwB,OAAA,GACjB5B,aAAa,EAAEE,gBAAgB,EAAEC,YAAY,EAACE,YAAY,EAAEJ,uBAAuB,EAAAgC,EAAA,CAAAzB,SAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}