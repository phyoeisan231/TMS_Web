{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthenticationService {\n  constructor(http, jwtHelper) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.authChangeSub = new Subject();\n    this.authChanged = this.authChangeSub.asObservable();\n  }\n  isUserAuthenticated() {\n    const token = localStorage.getItem(\"token\");\n    return token != null && !this.jwtHelper.isTokenExpired(token);\n  }\n  sendAuthStateChangeNotification(isAuthenticated) {\n    this.authChangeSub.next(isAuthenticated);\n  }\n  isUserAdmin() {\n    const token = localStorage.getItem(\"token\") || '';\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n    return role === 'Admin';\n  }\n  registerUser(body) {\n    return this.http.post(environment.url + 'Account/RegisterUser', body, httpOptions);\n  }\n  upDateRegister(body) {\n    return this.http.put(environment.url + 'Account/UpdateRegisterUser/', body, httpOptions);\n  }\n  loginUser(body) {\n    return this.http.post(environment.url + 'Account/Login', body);\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    this.sendAuthStateChangeNotification(false);\n  }\n  resetPassword(body) {\n    return this.http.post(environment.url + 'Account/ResetPassword', body, httpOptions);\n  }\n  getCurrentUser() {\n    const token = localStorage.getItem(\"token\") || '';\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n    const name = decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'];\n    const user = {\n      name: name,\n      role: role\n    };\n    return user;\n  }\n  getRole() {\n    const token = localStorage.getItem(\"token\");\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n    return role;\n  }\n  getUserRoleList() {\n    return this.http.get(environment.url + 'Account/GetUserRoles');\n  }\n  getUserList() {\n    return this.http.get(environment.url + 'Account/GetUsers');\n  }\n  deleteUser(id) {\n    return this.http.delete(environment.url + 'Account/DeleteUser/?id=' + id, httpOptions);\n  }\n  static {\n    this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","Subject","environment","httpOptions","headers","AuthenticationService","constructor","http","jwtHelper","authChangeSub","authChanged","asObservable","isUserAuthenticated","token","localStorage","getItem","isTokenExpired","sendAuthStateChangeNotification","isAuthenticated","next","isUserAdmin","decodedToken","decodeToken","role","registerUser","body","post","url","upDateRegister","put","loginUser","logout","removeItem","resetPassword","getCurrentUser","name","user","getRole","getUserRoleList","get","getUserList","deleteUser","id","delete","i0","ɵɵinject","i1","HttpClient","i2","JwtHelperService","factory","ɵfac","providedIn"],"sources":["D:\\poe\\RGL_TMS\\TMS_Web\\TMS_Web\\src\\app\\theme\\shared\\services\\authentication.service.ts"],"sourcesContent":["import { UserForAuthenticationDto } from '../interfaces/UserForAuthenticationDto.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthResponseDto } from '../interfaces/AuthResponseDto.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport { UserForRegistrationDto } from '../interfaces/UserForRegistrationDto.model';\r\nimport { RegistrationResponseDto } from '../interfaces/RegistrationResponseDto.model';\r\nimport { ResetPasswordDto } from '../interfaces/ResetPasswordDto.model';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private authChangeSub = new Subject<boolean>()\r\n  public authChanged = this.authChangeSub.asObservable();\r\n\r\n  constructor(private http: HttpClient, private jwtHelper: JwtHelperService) { }\r\n  isUserAuthenticated (): boolean {\r\n    const token = localStorage.getItem(\"token\");\r\n    return token != null && !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n\r\n  sendAuthStateChangeNotification (isAuthenticated: boolean) {\r\n    this.authChangeSub.next(isAuthenticated);\r\n  }\r\n\r\n  isUserAdmin(): boolean {\r\n    const token = localStorage.getItem(\"token\") || '';\r\n    const decodedToken = this.jwtHelper.decodeToken(token);\r\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\r\n    return role === 'Admin';\r\n  }\r\n\r\n  registerUser(body: UserForRegistrationDto) {\r\n    return this.http.post<RegistrationResponseDto>(environment.url + 'Account/RegisterUser', body, httpOptions);\r\n  }\r\n\r\n  upDateRegister(body:UserForRegistrationDto){\r\n    return this.http.put<RegistrationResponseDto>(environment.url + 'Account/UpdateRegisterUser/', body, httpOptions);\r\n  }\r\n\r\n  loginUser (body: UserForAuthenticationDto) {\r\n    return this.http.post<AuthResponseDto>(environment.url + 'Account/Login', body);\r\n  }\r\n\r\n  logout () {\r\n    localStorage.removeItem(\"token\");\r\n    this.sendAuthStateChangeNotification(false);\r\n  }\r\n\r\n  resetPassword (body: ResetPasswordDto) {\r\n    return this.http.post(environment.url + 'Account/ResetPassword', body, httpOptions);\r\n  }\r\n\r\n  getCurrentUser() {\r\n    const token = localStorage.getItem(\"token\") || '';\r\n    const decodedToken = this.jwtHelper.decodeToken(token);\r\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role']\r\n    const name = decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name']\r\n    const user = {\r\n      name: name,\r\n      role: role\r\n    };\r\n    return user;\r\n  }\r\n\r\n  getRole() {\r\n    const token = localStorage.getItem(\"token\");\r\n    const decodedToken = this.jwtHelper.decodeToken(token);\r\n    const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\r\n    return role;\r\n  }\r\n\r\n  getUserRoleList() {\r\n    return this.http.get<any>(environment.url + 'Account/GetUserRoles');\r\n  }\r\n\r\n  getUserList() {\r\n    return this.http.get<any>(environment.url + 'Account/GetUsers');\r\n  }\r\n\r\n  deleteUser(id: any) {\r\n    return this.http.delete<any>(environment.url + 'Account/DeleteUser/?id=' + id, httpOptions);\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}