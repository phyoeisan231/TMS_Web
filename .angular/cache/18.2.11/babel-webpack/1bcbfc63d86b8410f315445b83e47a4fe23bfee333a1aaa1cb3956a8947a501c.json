{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class DriverService {\n  constructor(http) {\n    this.http = http;\n  }\n  // getDriverList(active: string) {\n  //   return this.http.get<any>(environment.url + 'Master/GetDriverList/?active=' + active);\n  // }\n  getDriverList(active, isBlack) {\n    const params = new HttpParams().set('active', active).set('isBlack', isBlack);\n    return this.http.get(`${environment.url}Master/GetDriverList`, {\n      params\n    });\n  }\n  onBlackForm(data) {\n    return this.http.put(environment.url + 'Master/BlackFormForDriver/', data, httpOptions);\n  }\n  deleteDriver(id) {\n    const encodedId = encodeURIComponent(id); // Encode the ID\n    return this.http.delete(`${environment.url}Master/DeleteDriver/${encodedId}`, httpOptions);\n  }\n  static {\n    this.ɵfac = function DriverService_Factory(t) {\n      return new (t || DriverService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverService,\n      factory: DriverService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","environment","httpOptions","headers","DriverService","constructor","http","getDriverList","active","isBlack","params","set","get","url","onBlackForm","data","put","deleteDriver","id","encodedId","encodeURIComponent","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\poe\\RGL_TMS\\TMS_Web\\TMS_Web\\src\\app\\master\\components\\driver\\driver.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpHeaders,HttpClient, HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nconst httpOptions={\r\n  headers:new HttpHeaders({'Content-Type':'application/json'}),\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DriverService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n  \r\n  // getDriverList(active: string) {\r\n  //   return this.http.get<any>(environment.url + 'Master/GetDriverList/?active=' + active);\r\n  // }\r\n\r\n  getDriverList(active: string, isBlack: string) {\r\n    const params = new HttpParams()\r\n      .set('active', active)\r\n      .set('isBlack', isBlack);\r\n    return this.http.get<any>(`${environment.url}Master/GetDriverList`, { params });\r\n  }\r\n\r\n  onBlackForm(data: any) {\r\n    return this.http.put<any>(environment.url + 'Master/BlackFormForDriver/', data, httpOptions);\r\n  }\r\n  \r\n \r\n  deleteDriver(id: any) {\r\n    const encodedId = encodeURIComponent(id); // Encode the ID\r\n    return this.http.delete<any>(`${environment.url}Master/DeleteDriver/${encodedId}`,httpOptions);\r\n  }\r\n\r\n}\r\n"],"mappings":"AACA,SAASA,WAAW,EAAaC,UAAU,QAAQ,sBAAsB;AACzE,SAASC,WAAW,QAAQ,8BAA8B;;;AAC1D,MAAMC,WAAW,GAAC;EAChBC,OAAO,EAAC,IAAIJ,WAAW,CAAC;IAAC,cAAc,EAAC;EAAkB,CAAC;CAC5D;AAKD,OAAM,MAAOK,aAAa;EAExBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvC;EACA;EACA;EAEAC,aAAaA,CAACC,MAAc,EAAEC,OAAe;IAC3C,MAAMC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC5BW,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAM,GAAGX,WAAW,CAACY,GAAG,sBAAsB,EAAE;MAAEH;IAAM,CAAE,CAAC;EACjF;EAEAI,WAAWA,CAACC,IAAS;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAMf,WAAW,CAACY,GAAG,GAAG,4BAA4B,EAAEE,IAAI,EAAEb,WAAW,CAAC;EAC9F;EAGAe,YAAYA,CAACC,EAAO;IAClB,MAAMC,SAAS,GAAGC,kBAAkB,CAACF,EAAE,CAAC,CAAC,CAAC;IAC1C,OAAO,IAAI,CAACZ,IAAI,CAACe,MAAM,CAAM,GAAGpB,WAAW,CAACY,GAAG,uBAAuBM,SAAS,EAAE,EAACjB,WAAW,CAAC;EAChG;;;uBAvBWE,aAAa,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbrB,aAAa;MAAAsB,OAAA,EAAbtB,aAAa,CAAAuB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}