{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class DocumentSettingService {\n  constructor(http) {\n    this.http = http;\n  }\n  getDocumentSettings(active) {\n    return this.http.get(environment.url + 'Master/GetDocumentSettingList/?active=' + active);\n  }\n  // getYardList(active?: string): Observable<any[]> {\n  //   const params = active ? { active } : {}; // If active is provided, use it as a query param\n  //   return this.http.get<any[]>(`${environment.url}Master/GetPCategoryList`, { params });\n  // }\n  getCategoryList(active) {\n    return this.http.get(environment.url + 'Master/GetPCategoryList/?active=' + active);\n  }\n  createDocumentSetting(data) {\n    return this.http.post(environment.url + 'Master/SaveDocumentSetting', data, httpOptions);\n  }\n  updateDocumentSetting(data) {\n    return this.http.put(environment.url + 'Master/UpdateDocumentSetting/', data, httpOptions);\n  }\n  deleteDocumentSetting(id) {\n    return this.http.delete(environment.url + 'Master/DeleteDocumentSetting/' + id, httpOptions);\n  }\n  static {\n    this.ɵfac = function DocumentSettingService_Factory(t) {\n      return new (t || DocumentSettingService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DocumentSettingService,\n      factory: DocumentSettingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","environment","httpOptions","headers","DocumentSettingService","constructor","http","getDocumentSettings","active","get","url","getCategoryList","createDocumentSetting","data","post","updateDocumentSetting","put","deleteDocumentSetting","id","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\poe\\RGL_TMS\\TMS_Web\\TMS_Web\\src\\app\\master\\components\\document-setting\\document-setting.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DocumentSettingService {\r\n\r\n  constructor (private http: HttpClient, ) { }\r\n\r\n  getDocumentSettings(active: string) {\r\n    return this.http.get<any>(environment.url + 'Master/GetDocumentSettingList/?active=' + active);\r\n  }\r\n\r\n  // getYardList(active?: string): Observable<any[]> {\r\n  //   const params = active ? { active } : {}; // If active is provided, use it as a query param\r\n  //   return this.http.get<any[]>(`${environment.url}Master/GetPCategoryList`, { params });\r\n  // }\r\n  getCategoryList(active: string) {\r\n    return this.http.get<any>(environment.url + 'Master/GetPCategoryList/?active=' + active);\r\n  }\r\n  \r\n  createDocumentSetting(data: any) {\r\n    return this.http.post<any>(environment.url + 'Master/SaveDocumentSetting', data, httpOptions);\r\n  }\r\n\r\n  updateDocumentSetting(data: any) {\r\n    return this.http.put<any>(environment.url + 'Master/UpdateDocumentSetting/', data, httpOptions);\r\n  }\r\n\r\n  deleteDocumentSetting(id: any) {\r\n    return this.http.delete<any>(environment.url + 'Master/DeleteDocumentSetting/' + id, httpOptions);\r\n  }  \r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAE1D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAID,OAAM,MAAOI,sBAAsB;EAEjCC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAkB;EAE3CC,mBAAmBA,CAACC,MAAc;IAChC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAMR,WAAW,CAACS,GAAG,GAAG,wCAAwC,GAAGF,MAAM,CAAC;EAChG;EAEA;EACA;EACA;EACA;EACAG,eAAeA,CAACH,MAAc;IAC5B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAMR,WAAW,CAACS,GAAG,GAAG,kCAAkC,GAAGF,MAAM,CAAC;EAC1F;EAEAI,qBAAqBA,CAACC,IAAS;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAMb,WAAW,CAACS,GAAG,GAAG,4BAA4B,EAAEG,IAAI,EAAEX,WAAW,CAAC;EAC/F;EAEAa,qBAAqBA,CAACF,IAAS;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAMf,WAAW,CAACS,GAAG,GAAG,+BAA+B,EAAEG,IAAI,EAAEX,WAAW,CAAC;EACjG;EAEAe,qBAAqBA,CAACC,EAAO;IAC3B,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAMlB,WAAW,CAACS,GAAG,GAAG,+BAA+B,GAAGQ,EAAE,EAAEhB,WAAW,CAAC;EACnG;;;uBA1BWE,sBAAsB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAtBnB,sBAAsB;MAAAoB,OAAA,EAAtBpB,sBAAsB,CAAAqB,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}